package main

type MutationArg = Shape

is (m MutationArg) Input(input Shape) {
  // Note how we can use the `input` variable in the type guard below
  // which actually inserts a **type** into the shape (not a value)
  ensure m is { input }
}

is (m MutationArg) Context(ctx Shape) {
  ensure m is { ctx }
}

type AppContext = {
  sessionId: *String
}

type AppMutation = MutationArg.Context(AppContext)

// Manual type assertion on a field in a shape guard via accessor
is (ctx AppContext) LoggedIn() {
  ensure ctx.sessionId is NotNil()
}

func createUser(op AppMutation.Input({
  input: {
    name: String
  }
})) {
  ensure op.ctx is LoggedIn()

  println(*op.ctx.sessionId)

  return op.input.name, nil
}

func main() {
  sessionId := "479569ae-cbf0-471e-b849-38a698e0cb69"
  name, err = createUser({
    ctx: {
      sessionId: &sessionId,
    },
    input: {
      name: "Alice",
    },
  })
  ensure !err {
    println(err.Error())
  }
  println(name)
}
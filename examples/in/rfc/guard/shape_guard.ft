type MutationArg = Shape

is (m MutationArg) Input(input Shape) {
  // Note how we can use the `input` variable in the type guard below
  // which actually inserts a **type** into the shape (not a value)
  ensure m is { input }
}

is (m MutationArg) Context(ctx Shape) {
  ensure m is { ctx }
}

type AppContext = {
  sessionId: *String
}

type AppMutation = MutationArg.Context(AppContext)

// Manual type assertion on a field in a shape guard via accessor
is (ctx AppContext) LoggedIn() {
  ensure ctx.sessionId is NotNil()
}

func createUser(op AppMutation.Input({
  input: {
    name: String
  }
})) {
  ensure op.ctx is LoggedIn() or NotLoggedIn()

  println(op.ctx.sessionId)

  return op.input.name
}

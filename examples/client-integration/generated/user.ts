// Auto-generated TypeScript client for user.ft
// Generated by Forst TypeScript Transformer

import { ForstClient } from "@forst/sidecar";

const client = new ForstClient({
  baseUrl: process.env.FORST_BASE_URL || "http://localhost:8080",
  timeout: 30000,
  retries: 3,
});

// Type definitions
export interface User {
  id: string;
  name: string;
  age: number;
  email: string;
}

export interface CreateUserRequest {
  name: string;
  age: number;
  email: string;
}

export interface CreateUserResponse {
  user: User;
  created_at: number;
}

// Type guard for User validation
export function isValidUser(user: any): user is User {
  return (
    typeof user.age === "number" &&
    user.age > 0 &&
    user.age < 151 &&
    typeof user.name === "string" &&
    user.name.length >= 1 &&
    typeof user.email === "string" &&
    user.email.includes("@")
  );
}

// Function implementations
export async function CreateUser(
  input: CreateUserRequest
): Promise<CreateUserResponse> {
  const response = await client.invokeFunction("user", "CreateUser", input);
  if (!response.success) {
    throw new Error(response.error || "CreateUser failed");
  }
  return response.result as CreateUserResponse;
}

export async function GetUserById(id: string): Promise<User> {
  const response = await client.invokeFunction("user", "GetUserById", { id });
  if (!response.success) {
    throw new Error(response.error || "GetUserById failed");
  }
  return response.result as User;
}

export async function UpdateUserAge(id: string, newAge: number): Promise<User> {
  const response = await client.invokeFunction("user", "UpdateUserAge", {
    id,
    newAge,
  });
  if (!response.success) {
    throw new Error(response.error || "UpdateUserAge failed");
  }
  return response.result as User;
}

// Export client for advanced usage
export { client as forstClient };

version: "3"

vars:
  BINARY_NAME: forst
  BUILD_DIR: cmd/forst
  EXAMPLES_DIR: ../examples/in
  OUTPUT_DIR: ../examples/out

tasks:
  # Build tasks
  build:
    desc: Build the Forst compiler
    dir: forst
    cmds:
      - go build -o ../bin/{{.BINARY_NAME}} ./{{.BUILD_DIR}}
    sources:
      - ./**/*.go
    generates:
      - ../bin/{{.BINARY_NAME}}

  install:
    desc: Install the Forst compiler
    dir: forst
    cmds:
      - go install ./{{.BUILD_DIR}}

  clean:
    desc: Clean build artifacts
    dir: forst
    cmds:
      - rm -rf ../bin/
      - go clean -cache

  # Test tasks
  test:
    desc: Run all tests
    dir: forst
    cmds:
      - go test -v ./internal/...
      - go test -v ./cmd/forst/...

  test:unit:
    desc: Run unit tests only
    dir: forst
    cmds:
      - go test -v ./internal/...

  test:unit:parser:
    desc: Run unit tests for parser
    dir: forst
    cmds:
      - go test -v ./internal/parser/...

  test:unit:typechecker:
    desc: Run unit tests for typechecker
    dir: forst
    cmds:
      - go test -v ./internal/typechecker/...

  test:unit:transformer:
    desc: Run unit tests for transformer
    dir: forst
    cmds:
      - go test -v ./internal/transformer/...

  test:unit:lexer:
    desc: Run unit tests for lexer
    dir: forst
    cmds:
      - go test -v ./internal/lexer/...

  test:unit:ast:
    desc: Run unit tests for AST
    dir: forst
    cmds:
      - go test -v ./internal/ast/...

  test:integration:
    desc: Run integration tests (examples)
    dir: forst
    cmds:
      - go test -v ./cmd/forst/...

  test:coverage:
    desc: Run tests with coverage
    dir: forst
    cmds:
      - go test -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html
    generates:
      - coverage.out
      - coverage.html

  # Example compilation tasks
  example:
    desc: Compile a specific example file
    dir: forst
    cmds:
      - go run ./{{.BUILD_DIR}} run -trace -report-phases -- {{.CLI_ARGS}}
    vars:
      CLI_ARGS: '{{.CLI_ARGS | default "../examples/in/basic.ft"}}'

  example:basic:
    desc: Compile basic example
    dir: forst
    cmds:
      - go run ./{{.BUILD_DIR}} run -trace -report-phases -- {{.EXAMPLES_DIR}}/basic.ft

  example:function:
    desc: Compile function example
    dir: forst
    cmds:
      - go run ./{{.BUILD_DIR}} run -trace -report-phases -- {{.EXAMPLES_DIR}}/basic_function.ft

  example:ensure:
    desc: Compile ensure example
    dir: forst
    cmds:
      - go run ./{{.BUILD_DIR}} run -trace -report-phases -- {{.EXAMPLES_DIR}}/ensure.ft

  example:pointers:
    desc: Compile pointers example
    dir: forst
    cmds:
      - go run ./{{.BUILD_DIR}} run -trace -report-phases -- {{.EXAMPLES_DIR}}/pointers.ft

  example:shape-guard:
    desc: Compile shape guard example
    dir: forst
    cmds:
      - go run ./{{.BUILD_DIR}} run -trace -report-phases -- {{.EXAMPLES_DIR}}/rfc/guard/shape_guard.ft

  example:basic-guard:
    desc: Compile basic guard example
    dir: forst
    cmds:
      - go run ./{{.BUILD_DIR}} run -trace -report-phases -- {{.EXAMPLES_DIR}}/rfc/guard/basic_guard.ft

  example:sidecar:
    desc: Run end-to-end sidecar integration tests (build, start dev server, test, stop)
    dir: examples/in/rfc/sidecar
    cmds:
      - task: build
      - |
        export PORT=9371
        echo "Starting Forst dev server on port $PORT..."
        # Start server in background
        ./start-forst-server.sh &

        # Wait for server to start and find PID
        for i in {1..15}; do
          FORST_DEV_PID=$(pgrep -f "forst dev -port=$PORT" | head -1)
          if [ ! -z "$FORST_DEV_PID" ]; then
            echo "Started Forst dev server with PID $FORST_DEV_PID"
            break
          fi
          echo "Waiting for Forst process to start..."; sleep 1
        done

        if [ -z "$FORST_DEV_PID" ]; then
          echo "Failed to start Forst dev server, process not running"
          exit 1
        fi

        # Wait for the server to be healthy
        for i in {1..15}; do
          if curl -s http://localhost:$PORT/health | grep '"success":true' > /dev/null; then
            echo "Forst dev server is healthy"; break
          fi
          echo "Waiting for Forst dev server..."; sleep 1;
        done
        # Run the sidecar integration tests
        npm run test:sidecar
        TEST_EXIT_CODE=$?
        # Stop the dev server using the captured PID
        if [ ! -z "$FORST_DEV_PID" ]; then
          echo "Stopping Forst dev server (PID: $FORST_DEV_PID)"
          kill $FORST_DEV_PID 2>/dev/null || true
        fi
        exit $TEST_EXIT_CODE
    silent: false

  # Development tasks
  dev:watch:
    desc: Watch for changes and run tests
    cmds:
      - watchexec -r "task test"

  dev:lint:
    desc: Run linters
    dir: forst
    cmds:
      - golangci-lint run ./...

  dev:format:
    desc: Format code
    dir: forst
    cmds:
      - go fmt ./...

  dev:vet:
    desc: Run go vet
    dir: forst
    cmds:
      - go vet ./...

  # Documentation tasks
  docs:generate:
    desc: Generate documentation
    dir: forst
    cmds:
      - godoc -http=:6060

  # CI/CD tasks
  ci:test:
    desc: Run CI lint suite
    dir: forst
    cmds:
      - go test -race -covermode atomic -coverprofile=profile.cov ./cmd/forst/... ./internal/...
      - task example:sidecar

  # Release tasks
  build:release:
    desc: Build release binaries for multiple platforms
    dir: forst
    cmds:
      - mkdir -p ../dist
      - GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.Version={{.VERSION | default "dev"}} -X main.Commit={{.COMMIT | default "unknown"}} -X main.Date={{.DATE | default "unknown"}}" -o ../dist/{{.BINARY_NAME}}-linux-amd64 ./{{.BUILD_DIR}}
      - GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.Version={{.VERSION | default "dev"}} -X main.Commit={{.COMMIT | default "unknown"}} -X main.Date={{.DATE | default "unknown"}}" -o ../dist/{{.BINARY_NAME}}-linux-arm64 ./{{.BUILD_DIR}}
      - GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w -X main.Version={{.VERSION | default "dev"}} -X main.Commit={{.COMMIT | default "unknown"}} -X main.Date={{.DATE | default "unknown"}}" -o ../dist/{{.BINARY_NAME}}-darwin-amd64 ./{{.BUILD_DIR}}
      - GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X main.Version={{.VERSION | default "dev"}} -X main.Commit={{.COMMIT | default "unknown"}} -X main.Date={{.DATE | default "unknown"}}" -o ../dist/{{.BINARY_NAME}}-darwin-arm64 ./{{.BUILD_DIR}}
      - GOOS=windows GOARCH=amd64 go build -ldflags="-s -w -X main.Version={{.VERSION | default "dev"}} -X main.Commit={{.COMMIT | default "unknown"}} -X main.Date={{.DATE | default "unknown"}}" -o ../dist/{{.BINARY_NAME}}-windows-amd64.exe ./{{.BUILD_DIR}}
      - GOOS=windows GOARCH=arm64 go build -ldflags="-s -w -X main.Version={{.VERSION | default "dev"}} -X main.Commit={{.COMMIT | default "unknown"}} -X main.Date={{.DATE | default "unknown"}}" -o ../dist/{{.BINARY_NAME}}-windows-arm64.exe ./{{.BUILD_DIR}}
      - tar -czf ../dist/{{.BINARY_NAME}}-linux-amd64.tar.gz -C ../dist {{.BINARY_NAME}}-linux-amd64
      - tar -czf ../dist/{{.BINARY_NAME}}-linux-arm64.tar.gz -C ../dist {{.BINARY_NAME}}-linux-arm64
      - tar -czf ../dist/{{.BINARY_NAME}}-darwin-amd64.tar.gz -C ../dist {{.BINARY_NAME}}-darwin-amd64
      - tar -czf ../dist/{{.BINARY_NAME}}-darwin-arm64.tar.gz -C ../dist {{.BINARY_NAME}}-darwin-arm64
      - cd ../dist && zip {{.BINARY_NAME}}-windows-amd64.zip {{.BINARY_NAME}}-windows-amd64.exe
      - cd ../dist && zip {{.BINARY_NAME}}-windows-arm64.zip {{.BINARY_NAME}}-windows-arm64.exe
    generates:
      - ../dist/*.tar.gz
      - ../dist/*.zip

  release:check:
    desc: Check release configuration
    dir: forst
    cmds:
      - echo "Release configuration checked"
      - echo "Using Release Please for automated releases"

  release:please:
    desc: Run Release Please locally
    dir: forst
    cmds:
      - npx release-please manifest
      - echo "Release Please manifest generated"
      - echo "Use 'npx release-please create-pr' to create a release PR"
      - echo "Use 'npx release-please github-release' to create a GitHub release"

  release:test:
    desc: Test build with sample version info
    dir: forst
    cmds:
      - task build:release VERSION=1.0.0-test COMMIT=test-commit DATE=2024-01-01T00:00:00Z
      - echo "Test build completed with version info"
